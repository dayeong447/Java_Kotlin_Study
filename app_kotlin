package com.example.timegame

import android.content.Intent
import android.graphics.Color
import android.graphics.Typeface
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.View
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.google.android.gms.ads.AdRequest
import com.google.android.gms.ads.AdView
import com.google.android.gms.ads.MobileAds
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import kotlin.random.Random

class MainActivity : AppCompatActivity() {
    private lateinit var timeTextView: TextView
    private lateinit var startButton: Button
    private lateinit var blindModeButton: Button
    private lateinit var changeColorButton: Button
    private lateinit var changeFontButton: Button
    private lateinit var adView: AdView
    private var targetTime: String = ""
    private var isBlindMode = false
    private var participantCount = 0
    private val maxParticipants = 5 // 참가 인원 제한
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // UI 요소 초기화
        timeTextView = findViewById(R.id.timeTextView)
        startButton = findViewById(R.id.startButton)
        blindModeButton = findViewById(R.id.blindModeButton)
        changeColorButton = findViewById(R.id.changeColorButton)
        changeFontButton = findViewById(R.id.changeFontButton)
        adView = findViewById(R.id.adView)

        // 애드몹 초기화
        MobileAds.initialize(this) {}
        val adRequest = AdRequest.Builder().build()
        adView.loadAd(adRequest)
        
        // 현재 시간 표시 시작
        updateTime()
        
        // 시작 버튼 클릭 시 목표 시간 설정 및 참가자 증가
        startButton.setOnClickListener {
            if (participantCount < maxParticipants) {
                targetTime = generateRandomTime()
                participantCount++
                Toast.makeText(this, "목표 시간: $targetTime", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "참가 인원이 초과되었습니다!", Toast.LENGTH_SHORT).show()
            }
        }
        
        // 블라인드 모드 활성화
        blindModeButton.setOnClickListener {
            isBlindMode = !isBlindMode
            timeTextView.visibility = if (isBlindMode) View.INVISIBLE else View.VISIBLE
            Toast.makeText(this, if (isBlindMode) "블라인드 모드 ON" else "블라인드 모드 OFF", Toast.LENGTH_SHORT).show()
        }
        
        // 버튼 색상 변경 기능
        changeColorButton.setOnClickListener {
            startButton.setBackgroundColor(Color.rgb(Random.nextInt(256), Random.nextInt(256), Random.nextInt(256)))
        }
        
        // 폰트 변경 기능
        changeFontButton.setOnClickListener {
            val typeface = Typeface.createFromAsset(assets, "fonts/custom_font.ttf")
            timeTextView.typeface = typeface
            Toast.makeText(this, "폰트가 변경되었습니다!", Toast.LENGTH_SHORT).show()
        }
        
        // 시작 화면으로 이동
        val intent = Intent(this, StartActivity::class.java)
        startActivity(intent)
    }
    
    // 현재 시간을 계속 업데이트하는 함수
    private fun updateTime() {
        val handler = Handler(Looper.getMainLooper())
        handler.post(object : Runnable {
            override fun run() {
                val sdf = SimpleDateFormat("HH:mm:ss", Locale.getDefault())
                timeTextView.text = sdf.format(Date())
                handler.postDelayed(this, 1000) // 1초마다 업데이트
            }
        })
    }
    
    // 랜덤 목표 시간 생성
    private fun generateRandomTime(): String {
        val randomHour = Random.nextInt(0, 24)
        val randomMinute = Random.nextInt(0, 60)
        return String.format("%02d:%02d", randomHour, randomMinute)
    }
}

